#!/bin/bash

set -euo pipefail

DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

# shellcheck source=lib/plugin.bash
. "$DIR/../lib/plugin.bash"

# Required parameter
GITHUB_TOKEN_RAW=$(plugin_read_config GITHUB_TOKEN "")
# If the config contains a variable reference, expand it
if [[ "${GITHUB_TOKEN_RAW}" =~ ^\$[A-Z_]+ ]]; then
  VAR_NAME="${GITHUB_TOKEN_RAW#$}"
  GITHUB_TOKEN="${!VAR_NAME}"
else
  GITHUB_TOKEN="${GITHUB_TOKEN_RAW}"
fi

if [ -z "${GITHUB_TOKEN}" ]; then
  echo "❌ Missing required 'github_token' parameter"
  exit 1
fi

# Optional parameters with defaults
FAIL_BUILD_THRESHOLD=$(plugin_read_config FAIL_BUILD_THRESHOLD "")
FORMAT=$(plugin_read_config FORMAT "json")
ANNOTATE=$(plugin_read_config ANNOTATE "true")
STORE_RESULTS=$(plugin_read_config STORE_RESULTS "false")
VERSION=$(plugin_read_config VERSION "stable")

# Get repository URL from Buildkite environment
BUILDKITE_REPO="${BUILDKITE_REPO:-}"
if [ -z "${BUILDKITE_REPO}" ]; then
  echo "❌ Unable to determine repository URL from Buildkite environment"
  exit 1
fi

STRIPPED_URL="${BUILDKITE_REPO%.git}"
REPO_URL="${STRIPPED_URL:-}"

echo "🔍 Running OSSF Scorecard analysis..."
echo "Repository: ${REPO_URL}"
echo "Format: ${FORMAT}"
echo "Version: ${VERSION}"

# Build Docker command
DOCKER_CMD="docker run --rm"
DOCKER_CMD="${DOCKER_CMD} -e GITHUB_AUTH_TOKEN=${GITHUB_TOKEN}"
DOCKER_CMD="${DOCKER_CMD} gcr.io/openssf/scorecard:${VERSION}"
DOCKER_CMD="${DOCKER_CMD} --repo=${REPO_URL}"
DOCKER_CMD="${DOCKER_CMD} --format=${FORMAT}"

# Add specific checks if configured
if plugin_read_list_into_result CHECKS; then
  for check in "${result[@]}"; do
    DOCKER_CMD="${DOCKER_CMD} --checks=${check}"
  done
fi

# Run Scorecard
echo "Running: ${DOCKER_CMD}"
if ! SCORECARD_RAW_OUTPUT=$(eval "${DOCKER_CMD}" 2>&1); then
  echo "❌ OSSF Scorecard failed:"
  echo "${SCORECARD_RAW_OUTPUT}"
  exit 1
fi

echo "✅ OSSF Scorecard completed successfully"

# Extract only the JSON part (last line that starts with {) if format is JSON
if [ "${FORMAT}" = "json" ]; then
  SCORECARD_OUTPUT=$(echo "${SCORECARD_RAW_OUTPUT}" | grep '^{' | tail -1)
  
  if [ -z "${SCORECARD_OUTPUT}" ]; then
    echo "❌ No JSON output found in scorecard results"
    echo "Raw output:"
    echo "${SCORECARD_RAW_OUTPUT}"
    exit 1
  fi
else
  SCORECARD_OUTPUT="${SCORECARD_RAW_OUTPUT}"
fi

# Store results if requested
if [ "${STORE_RESULTS}" = "true" ]; then
  RESULTS_FILE="scorecard-results.${FORMAT}"
  echo "${SCORECARD_OUTPUT}" > "${RESULTS_FILE}"
  if which buildkite-agent >/dev/null 2>&1; then
    buildkite-agent artifact upload "${RESULTS_FILE}"
    echo "📁 Results stored as artifact: ${RESULTS_FILE}"
  else
    echo "📁 Results saved to: ${RESULTS_FILE} (buildkite-agent not available)"
  fi
fi

# Create annotation if requested (only for JSON format)
if [ "${ANNOTATE}" = "true" ] && [ "${FORMAT}" = "json" ]; then
  # Extract overall score from JSON output
  if command -v jq >/dev/null 2>&1; then
    OVERALL_SCORE=$(echo "${SCORECARD_OUTPUT}" | jq -r '.score // "N/A"')
    
    # Determine score emoji and style
    SCORE_EMOJI="🔴"
    ANNOTATION_STYLE="error"
    if (( $(echo "${OVERALL_SCORE} >= 8" | bc -l 2>/dev/null || echo 0) )); then
      SCORE_EMOJI="🟢"
      ANNOTATION_STYLE="success"
    elif (( $(echo "${OVERALL_SCORE} >= 6" | bc -l 2>/dev/null || echo 0) )); then
      SCORE_EMOJI="🟡"
      ANNOTATION_STYLE="warning"
    elif (( $(echo "${OVERALL_SCORE} >= 4" | bc -l 2>/dev/null || echo 0) )); then
      SCORE_EMOJI="🟠"
      ANNOTATION_STYLE="warning"
    fi
    
    # Count check results
    TOTAL_CHECKS=$(echo "${SCORECARD_OUTPUT}" | jq -r '.checks | length')
    PASSED_CHECKS=$(echo "${SCORECARD_OUTPUT}" | jq -r '[.checks[] | select(.score >= 7)] | length')
    WARNING_CHECKS=$(echo "${SCORECARD_OUTPUT}" | jq -r '[.checks[] | select(.score >= 4 and .score < 7)] | length')
    FAILED_CHECKS=$(echo "${SCORECARD_OUTPUT}" | jq -r '[.checks[] | select(.score < 4 and .score >= 0)] | length')
    ERROR_CHECKS=$(echo "${SCORECARD_OUTPUT}" | jq -r '[.checks[] | select(.score < 0)] | length')
    
    # Get top 3 best performing checks
    TOP_CHECKS=$(echo "${SCORECARD_OUTPUT}" | jq -r '[.checks[] | select(.score >= 0)] | sort_by(-.score) | .[0:3] | .[] | "• **\(.name)**: \(.score)/10 - \(.reason)"')
    
    # Get worst performing checks (score < 7 and >= 0)
    WORST_CHECKS=$(echo "${SCORECARD_OUTPUT}" | jq -r '[.checks[] | select(.score < 7 and .score >= 0)] | sort_by(.score) | .[0:3] | .[] | "• **\(.name)**: \(.score)/10 - \(.reason)"')
    
    # Get checks with errors (score -1)
    ERROR_CHECK_LIST=$(echo "${SCORECARD_OUTPUT}" | jq -r '[.checks[] | select(.score < 0)] | .[] | "• **\(.name)**: Error - \(.reason)"')
    
    # Build annotation
    ANNOTATION="## ${SCORE_EMOJI} OSSF Scorecard Security Analysis\n\n"
    ANNOTATION="${ANNOTATION}### Overall Score: **${OVERALL_SCORE}/10**\n\n"
    ANNOTATION="${ANNOTATION}📊 **Summary:** ${PASSED_CHECKS} passed • ${WARNING_CHECKS} warnings • ${FAILED_CHECKS} failed"
    if [ "${ERROR_CHECKS}" -gt 0 ]; then
      ANNOTATION="${ANNOTATION} • ${ERROR_CHECKS} errors"
    fi
    ANNOTATION="${ANNOTATION} (${TOTAL_CHECKS} total checks)\n\n"
    
    # Add top performing checks
    if [ -n "${TOP_CHECKS}" ]; then
      ANNOTATION="${ANNOTATION}### ✅ Top Performing Checks\n${TOP_CHECKS}\n\n"
    fi
    
    # Add areas for improvement
    if [ -n "${WORST_CHECKS}" ]; then
      ANNOTATION="${ANNOTATION}### ⚠️ Areas for Improvement\n${WORST_CHECKS}\n\n"
    fi
    
    # Add error checks if any
    if [ -n "${ERROR_CHECK_LIST}" ]; then
      ANNOTATION="${ANNOTATION}### ❌ Checks with Errors\n${ERROR_CHECK_LIST}\n\n"
    fi
    
    # Add OSSF Scorecard badge section
    # Parse owner/repo from BUILDKITE_REPO (format: https://github.com/owner/repo.git)
    if [[ "${REPO_URL}" =~ github\.com/([^/]+)/([^/]+)$ ]]; then
      REPO_OWNER="${BASH_REMATCH[1]}"
      REPO_NAME="${BASH_REMATCH[2]}"
      BADGE_URL="[![OpenSSF Scorecard](https://api.scorecard.dev/projects/github.com/${REPO_OWNER}/${REPO_NAME}/badge)](https://scorecard.dev/viewer/?uri=github.com/${REPO_OWNER}/${REPO_NAME})"
      ANNOTATION="${ANNOTATION}### 🏆 OSSF Scorecard Badge\n\nAdd this badge to your README to display your security score:\n\n${BADGE_URL}\`\`\`markdown\n${BADGE_URL}\n\`\`\`\n\n"
    fi
    
    ANNOTATION="${ANNOTATION}\n📋 [View detailed results](artifact://scorecard-results.${FORMAT}) • 📚 [OSSF Scorecard Documentation](https://github.com/ossf/scorecard#scorecard-checks)"

    if which buildkite-agent >/dev/null 2>&1; then
      # Write annotation to a temp file then use cat to properly preserve formatting
      ANNOTATION_FILE="markdown-for-annotation.md"
      printf "%b\n" "${ANNOTATION}" > "${ANNOTATION_FILE}"
      buildkite-agent annotate --style "${ANNOTATION_STYLE}" --context scorecard < "${ANNOTATION_FILE}"
      echo "📝 Created enhanced Buildkite annotation with detailed results"
    else
      echo "📝 Enhanced annotation content prepared (buildkite-agent not available)"
    fi
  else
    echo "⚠️ jq not available, skipping annotation creation"
  fi
fi

if [ -n "${FAIL_BUILD_THRESHOLD}" ] && [ "${FORMAT}" = "json" ]; then
  if command -v jq >/dev/null 2>&1 && command -v bc >/dev/null 2>&1; then
    OVERALL_SCORE=$(echo "${SCORECARD_OUTPUT}" | jq -r '.score // 0')
    if (( $(echo "${OVERALL_SCORE} < ${FAIL_BUILD_THRESHOLD}" | bc -l) )); then
      echo "❌ Build failed: Overall score ${OVERALL_SCORE} is below threshold ${FAIL_BUILD_THRESHOLD}"
      exit 1
    else
      echo "✅ Score ${OVERALL_SCORE} meets threshold ${FAIL_BUILD_THRESHOLD}"
    fi
  else
    echo "⚠️ jq or bc not available, skipping threshold check"
  fi
fi

echo "🎉 OSSF Scorecard analysis completed successfully"
